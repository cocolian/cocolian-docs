---
layout:     source 
title:      "2017-12-23-WeChat"
date:       2017-12-23 12:00:00
author:     吕彦鹏
lines:      158 
tag:       [chat]
---
> 12:47:23  付云龙  
   
今天怎么这么安静  
   
> 13:04:31  dimi  
   
周末了吧  
   
> 13:05:14  ｛润瑾｝  
   
过圣诞去了  
   
> 13:27:37  凌锋  
   
谁有接触过中国银行个金业务转账接口的开发，  
   
> 13:30:22  凌锋  
   
同行转账检验要素有哪些  
   
> 13:47:34  松子儿  
   
餐饮行业，有支付0费率的吗？  
   
> 13:49:00  cs  
   
281才出了规定不能提0费率这些  
   
> 13:49:05  cs  
   
顶风作案？？  
   
> 13:51:34  松子儿  
   
额  
   
> 13:51:53  Gill Chi  
   
只有公益，非盈利机构系列才有0费率  
   
> 13:57:34  松子儿  
   
嗯  
   
> 14:46:42  李宝  
   
![2017-12-23 14:46:42](http://static.cocolian.cn/img/201712/20171223_144642.png) 
   
> 17:02:55  付云龙  
   
![2017-12-23 17:02:55](http://static.cocolian.cn/img/201712/20171223_170255.png) 
   
> 17:03:14  付云龙  
   
支付回调用全局锁会有问题吧，这样效率很低啊  
   
> 19:03:52  程琳-杉德支付-PM  
   
今天请到一位朋友，@吕彦鹏-九派支付-架构师-北京  给大家做分享，主题是 “从幂等到用户感知一致性” 开始时间为【19:30】；欢迎欢迎[鼓掌][鼓掌][鼓掌]！（注： 1.嘉宾分享期间其他人不要发言打断嘉宾分享。2.分享完成后请大家积极补充和提问；3.烦请领取红包签到，谢谢！）  
   
> 19:04:25  Jos  
   
签到  
   
> 19:04:28  程琳-杉德支付-PM  
   
[微信红包](https://wxapp.tenpay.com/mmpayhb/wxhb_personalreceive?showwxpaytitle=1&amp;amp;msgtype=1&amp;amp;channelid=1&amp;amp;sendid=1000039501201712237021532392155&amp;amp;ver=6&amp;amp;sign=c3a4793511e51aba102b3c85a0d05d20d170779f5cce42fd7d02a6a01597cdbe0e9ce7daff3d5f3c2bf49a73854c0e5eb27cee4e76c3e95bea522ef3530e4742d8c8fd258d460480f0328a405af96931)  
   
> 19:04:44  凌锋  
   
签到  
   
> 19:04:55  Dewin  
   
签到  
   
> 19:05:03  丁志伟  
   
期待。  
   
> 19:05:08  Tom Gui  
   
签到  
   
> 19:05:09  西纳  
   
签到  
   
> 19:05:24  程琳-杉德支付-PM  
   
欢迎吕总给大伙儿做分享[鼓掌][鼓掌][鼓掌]  
   
> 19:07:56  wujn  
   
签到  
   
> 19:12:16  唐唐  
   
签到  
   
> 19:12:30  Victor  
   
[玫瑰][玫瑰][玫瑰]  
   
> 19:12:38  田伟 David ????  
   
签到  
   
> 19:15:28  冰镇、西瓜  
   
签到  
   
> 19:15:47  balance  
   
签到  
   
> 19:16:28  吕彦鹏  
   
签到  
   
> 19:18:23  毛嘉兴-云账户  
   
欢迎  
   
> 19:19:18  云  
   
欢迎  
   
> 19:19:54  Jamie Gao  
   
签到  
   
> 19:20:13  一生尤文  
   
签到  
   
> 19:20:16  MyCity  
   
签到  
   
> 19:22:22  只是个昵称  
   
签到  
   
> 19:23:04  sea  
   
签到  
   
> 19:23:24  ｛润瑾｝  
   
签到  
   
> 19:27:50  松松  
   
签到  
   
> 19:28:01  隔壁老王  
   
签到  
   
> 19:32:27  幸福时光  
   
签到  
   
> 19:32:40  zhoulei  
   
签到  
   
> 19:32:50  上协  
   
签到  
   
> 19:33:03  付云龙  
   
签到  
   
> 19:33:52  heping  
   
签到  
   
> 19:34:37  吴淘东  
   
签到  
   
> 19:36:50  Ferry  
   
签到  
   
> 19:38:16  东方  
   
签到  
   
> 19:39:16  吕彦鹏  
   
hello, 今天给大家分享一下支付接口规范, 以及根据接口规范, 如何从用户触发补偿, 保证用户感知一致性.  
   
> 19:39:48  吕彦鹏  
   
下面是我们的支付接口(包括相同交易的查询和交易接口返回结果相同)设计:   ``` {     &amp;quot;status&amp;quot;: &amp;quot;1&amp;quot;表示成功，&amp;quot;2&amp;quot;表示失败，&amp;quot;3&amp;quot;进行中，&amp;quot;4&amp;quot;表示未知；     &amp;quot;reqNO&amp;quot;: 请求的唯一单据号（可为空，涉及到资金必填。）     &amp;quot;rspNO&amp;quot;: 支付返回的单据号（可为空，涉及到资金必填。）     &amp;quot;retCd&amp;quot;: 服务方返回代码。业务含义。（不为空）     &amp;quot;retMsg&amp;quot;: &amp;quot;操作成功！&amp;quot;,//返回给调用方的结果描述信息（不为空）     &amp;quot;data&amp;quot;: {         ....     } } ```  
   
> 19:39:53  黑皮老阿姨  
   
签到  
   
> 19:40:33  吕彦鹏  
   
这是我们交易类的接口和交易类查询接口的接口规范.  
   
> 19:42:23  吕彦鹏  
   
下面着重解释一下status.  
   
> 19:42:30  吕彦鹏  
   
status: 作为支付单据处理状态和唯一判断标准, 对于外部系统最重要的。  + &amp;quot;1&amp;quot;表示成功，代表这笔单据支付这边已经处理成功并且完成。 + &amp;quot;2&amp;quot;表示失败，代表这笔单据支付这边已经处理失败，调用方可以根据这个状态发起重试。或者根据失败的原因重新调整单据内容重新发起请求，但是请求单据号必须更新。如果不更新单据号，会触发支付的幂等控制，支付不在再次处理直接返回失败结果。 + &amp;quot;3&amp;quot;进行中，代表这笔单据支付这边已经正在处理。如果相同单据号视为相同单据重复发送，触发幂等控制，如果之前未存在该订单, 执行支付行为; 如果已经执行交易, 则返回查询上次发送单据的当前状态。 + &amp;quot;4&amp;quot;表示未知, 本状态情形比较复杂.     + 支付系统返回非接口协议内容, 可以认为是未知状态     + 支付系统抛出不可控的异常, 捕获异常后, 直接抛出未知状态.     + 支付系统接收到查询请求, 但是本地无该订单, 返回未知状态. 后发先至情况, 不能代表单据的真实结果.      + 支付系统其它未知情况, 均当做未知处理.  
   
> 19:44:18  吕彦鹏  
   
reqNo和rspNo, 是双方的单据号.  
   
> 19:44:58  吕彦鹏  
   
基于目前的接口规范:   &amp;gt; 所有订单，最后的终结状态只能是”1”和”2”, 且绝对可信任。 &amp;gt; 所有重发，单据号一定要确保幂等。 &amp;gt; 明确收到状态2，可以变更单据号作为一笔新交易, 用于支付失败重试.  &amp;gt; 所有接口满足幂等.  &amp;gt; 如果支付调用第三方业务处理，或者在接口内部处理的过程中抛出异常，支付的接口必须捕获异常。如果支付能处理异常，在保证单据正常处理情况可以致单据状态为成功或失败，并且返回调用方单据状态，否则支付统一返回单据为未知。如果支付这边不能有效控制异常，将异常抛出到调用方，调用方默认这次处理为未知，不代表单据处理失败。需要再次发起查询或者请求。 &amp;gt; 超时当成处理中对待。  
   
> 19:45:57  吕彦鹏  
   
下面基于接口规范, 来保证用户感知一致性.  
   
> 19:46:03  吕彦鹏  
   
整个支付系统作为一个分布式系统, 可以通过每日对账保证了最终一致性; 通过各种补偿机制尝试去满足用户感知一致性. 但是仅仅通过补偿机制是不够的.  
   
> 19:46:32  吕彦鹏  
   
补偿的缺点  补偿脚本进行状态确认可以消除各个系统之间存在状态不一致. 通常补偿脚本多通过定时任务的形式去做.   定时任务有很多缺陷:  1. 时间间隔最小粒度是1分钟;  2. 调用间隔固定.  3. 系统链路过多, 导致补偿时间进一步增加  
   
> 19:47:29  吕彦鹏  
   
针对这些缺点, 我们设计了 用户感知一致性的补偿系统.  
   
> 19:47:45  吕彦鹏  
   
![2017-12-23 19:47:45](http://static.cocolian.cn/img/201712/20171223_194745.png) 
   
> 19:47:55  吕彦鹏  
   
系统分6个模块, 另外存在2个隐藏模块, 配置管理, 初始化模块. 系统流程如下:   1.  首先根据各业务特点, 自定义补偿时间间隔序列. (默认模仿tcp慢启动cwnd参数的算法,cwnd初始=1,  cwnd=cwnd*2) 2.  生产者, 查询各个业务系统中进行中数据. 并按照业务时间间隔, 入时序队列.  3.  秒级定时器, 每秒取当前s数据进行补偿.  4.  接口查询根据单号也可以调用查询引擎查询.  
   
> 19:49:00  吕彦鹏  
   
查询接口, 对用户交互层次接口提供服务, 如果用户交互层次接口发现非终结状态, 会调用该系统, 进行查询确认最终状态. 保证了用户查询时, 能得到交易目前的正确状态.  
   
> 19:49:17  吕彦鹏  
   
以上就是本次分享, 请大家先看一下.  
   
> 19:50:09  sea  
   
感觉有点复杂  
   
> 19:50:43  sea  
   
心中有个疑义。这个设计是不是在实际运行中经常出错？  
   
> 19:51:06  吕彦鹏  
   
本质是一个补偿中心. 用户有行为时, 会确认当前交易是否是终结态, 不是终结态, 回去查询.  
   
> 19:51:27  sea  
   
如果出现大面积出错  
   
> 19:51:40  sea  
   
反复确认。那不是会再次雪崩效应吗？  
   
> 19:52:24  sea  
   
假设本来只是20qps/s 但是因为这种机制，就可能变成2000qps/s  
   
> 19:52:25  吕彦鹏  
   
这是系统的一个最难处理的问题. 大面积出问题时, 会出现雪崩.  
   
> 19:53:49  吕彦鹏  
   
所以单笔交易, 会按照一个指数递增的时间间隔, 进行查询, qps会快速降低,  
   
> 19:54:41  zhoulei  
   
支付处理上，有没有考虑限流？  
   
> 19:54:45  于高禾-一亩田 PL  
   
在服务提供方限速呗  
   
> 19:54:46  上协  
   
时序队列 是自己实现的吗？还是采用的mq啊？  
   
> 19:54:49  只是个昵称  
   
正常情况下如果出现大面积问题时会有监控告警出现的吧，防止事态进一步恶化  
   
> 19:55:37  吕彦鹏  
   
mq自身支持指数递增重发, 但是不太好自定义.  
   
> 19:55:56  上协  
   
那这个支付场景应该对实时性（得到终态）要求不高吧  
   
> 19:56:24  上协  
   
否则 等了好久才有结果 特定场景用户等不了  
   
> 19:56:58  于高禾-一亩田 PL  
   
本身触发补偿的比例就不会太高，所以这个补偿机制不用太精细，遇到异常分支直接报警人工介入就可以吧  
   
> 19:57:05  吕彦鹏  
   
我们直接设计了, 秒级的定时器, 每个交易, 对应的下次查询会存在一个时间为key的存储中, 秒级定时器, 读取key中的订单号, 进行处理.  
   
> 19:57:28  吕彦鹏  
   
![2017-12-23 19:57:28](http://static.cocolian.cn/img/201712/20171223_195728.png) 
   
> 19:57:39  吕彦鹏  
   
时序队列会有人工报警介入.  
   
> 19:58:12  吕彦鹏  
   
线上问题过多, 会报警通知, 不仅是一个补偿问题, 可能存在系统性问题.  
   
> 19:59:08  sea  
   
这里还存在一个问题。系统之间的依赖性太强。一旦有某个组件挂了。排查起来。感觉很头大  
   
> 19:59:10  zhoulei  
   
查询引擎 基于什么技术实现的呢？  
   
> 19:59:54  上协  
   
请问，各组建之间是用什么技术调用的？  
   
> 20:00:20  吕彦鹏  
   
目前每个组件有问题, 调用系统会有对应的错误码提示.  
   
> 20:00:47  sea  
   
我说的是组建之间调用错误。然后造成的数据异常  
   
> 20:01:29  吕彦鹏  
   
查询引擎, 实际是不同的交易类型, 和 接口的一个对应关系, 根据订单类型, 查询交易实际状态.  
   
> 20:01:43  吕彦鹏  
   
@张海-澳觅-架构师-澳门 不了解你的意思.  
   
> 20:02:23  吕彦鹏  
   
业务系统, 均为dubbo调用. 补偿中心系统, http.  
   
> 20:04:02  zhoulei  
   
张海的意思，估计是 组件之间调用，接口变化，逻辑业务逻辑变动，服务方的IP地址变化，组件有一个挂了，如何快速定位  
   
> 20:04:03  上协  
   
查询接口是一直调用吗（如果一直无终态）？还是说有次数限制？  
   
> 20:05:50  上协  
   
如果一直无终态 是怎么处理？  
   
> 20:06:19  desperado  
   
图上的生产者 消费者是dubbo相关的吗？  
   
> 20:06:24  吕彦鹏  
   
组件之间的调用, 不光为本系统服务, 还为线上提供服务, 一般不是通过补偿来定位组件接口调用.  
   
> 20:07:22  吕彦鹏  
   
@陆训-开发-51信用卡-北京 有次数限制. 一般设定一个比较小的次数, 一般是补偿到最后一次, 还未能确定终态, 会有报警.  
   
> 20:07:44  上协  
   
哦哦  
   
> 20:09:25  蔡少杏  
   
签到  
   
> 20:09:26  吕彦鹏  
   
dubbo是一个框架, 生产者和消费者的实现, 对系统无要求.  
   
> 20:10:20  Tom Gui  
   
秒级补偿针对的都是正向交易还是说反向交易同样执行？补偿无果或系统性异常，业务一致性如何处理？  
   
> 20:11:46  吕彦鹏  
   
反向交易是指退款?  
   
> 20:12:18  吕彦鹏  
   
业务一致性具体指什么?  
   
> 20:13:51  上协  
   
支付这块 业务不一致肯定会有。后续对账 人工处理 或补单吧。@Tom-澳门通-PMD?  
   
> 20:14:16  吕彦鹏  
   
最终一致, 肯定是通过各个组件间对账保证的.  
   
> 20:14:39  上协  
   
只能最终一致  
   
> 20:23:16  desperado  
   
同问 时序队列是咋的实现的？  时间为key  那value是不是会有多个订单？  
   
> 20:24:26  吕彦鹏  
   
redis, 以unix时间戳为key.  
   
> 20:24:34  吕彦鹏  
   
恩, 多个订单.  
   
> 20:41:56  desperado  
   
那这个秒级定时器，定时从队列中取数据  ，去查询相应的状态   
   
> 20:46:02  吕彦鹏  
   
恩 .  
   
> 20:49:47  desperado  
   
这个状态是不是，也会更新到redis中。？  
   
> 20:50:18  吕彦鹏  
   
如果终结态了, 就不会再继续放到下一个时间戳key.  
   
> 20:50:52  desperado  
   
就是会删了，从redis 中  
   
> 20:50:59  吕彦鹏  
   
恩.  
   
> 20:51:19  desperado  
   
我还以为，用户再次查询 时，，会从这个redis中，直接 拿出来给他呢  
   
> 20:51:29  desperado  
   
还有，这个秒级定时器，查询也是有个范围的吧，  
   
> 20:51:39  desperado  
   
查询多长时间内的订单是吧。。  
   
> 20:51:55  desperado  
   
就是把这个redis当成数据源。？  
   
> 20:52:17  吕彦鹏  
   
恩.  
   
> 20:52:35  吕彦鹏  
   
把redis当数据源, 高大上点说, 就是时序队列.  
   
> 20:52:54  desperado  
   
呵呵，，哦，原来如此，，高  
   
> 20:53:45  desperado  
   
redis 里的数据 是，用户主动发起时，，发现状态 不对，放到里面的，还是系统有定时job扫数据 ，放到redis 中的，？还是两者都 有  
   
> 20:55:01  吕彦鹏  
   
定时job来扫数据.  
   
> 20:56:04  desperado  
   
那这个定时job，跟  秒级定时器，负责的任务是不是有交集  
   
> 20:56:16  desperado  
   
是不是，功效是一样的？  
   
> 20:58:01  吕彦鹏  
   
只是定时器功能有交集. 其他业务无交集. 另外, 这块也可以通过业务系统mq通知.  
   
> 20:59:14  desperado  
   
哦  
   
> 21:00:27  desperado  
   
再请教下，dubbo的东西，有时候 ，dubbo调用会超时，超时以后，就可能会有几种 情况，1：没调到，就是超时，2就是，调成功了，但 是没有及时返回 ，。。  
   
> 21:00:52  desperado  
   
你们是怎么处理的  
   
> 21:01:25  吕彦鹏  
   
你这个我感觉是网络问题.  
   
> 21:02:20  吕彦鹏  
   
超时, 当做进行中, 客户端通过原单号重发, 服务方幂等, 保证订单唯一, 并提供正确的执行或者查询结果.  
   
> 21:03:12  desperado  
   
幂等，你们是怎么设计的  
   
> 21:03:37  desperado  
   
是，来一笔，拿订单号查询 吗？  
   
> 21:03:39  吕彦鹏  
   
交易表中, 订单号作为唯一索引来控制.  
   
> 21:03:52  desperado  
   
拿异常来处理  
   
> 21:03:53  吕彦鹏  
   
肯定不是, 并发的情况, 查询没用.  
   
> 21:04:40  desperado  
   
嗯  
   
> 21:04:44  吕彦鹏  
   
唯一索引下, 触发duplicatekey异常, 然后查询验证数据一致后, 查询订单结果, 返回给调用方.  
   
> 21:05:36  desperado  
   
嗯，不赖  
   
> 21:05:52  desperado  
   
能不能不从数据库层，做这个  
   
> 21:06:03  吕彦鹏  
   
查询来控制幂等, 是最常见的错误.  
   
> 21:07:01  吕彦鹏  
   
我觉得不能, 或者说数据库这个很方便也很安全. 没考虑过其他的方法.  
   
> 21:07:43  吕彦鹏  
   
可以搞一个集中幂等, 为了支持可靠性, 其核心肯定也是基于数据库.  
   
> 21:08:08  desperado  
   
集中幂等？  
   
> 21:08:17  desperado  
   
大概是个啥 样的  
   
> 21:10:11  吕彦鹏  
   
订单号, 集中存储. 集中验证.  
   
> 21:11:19  desperado  
   
那把订单号当成key ，扔到redis里，中不中。。   
   
> 21:11:30  吕彦鹏  
   
我以前听过, 没细琢磨; 但是我觉得这个事无异议.  
   
> 21:11:43  吕彦鹏  
   
redis可靠性, 不如数据库.  
   
> 21:12:35  付云龙  
   
目前支付模块这块能达到一个什么样的指标，比如qps/tps,rt,并发数,请求数，可靠性，数据库连接数，每秒最大订单数这些等等  
   
> 21:12:51  吕彦鹏  
   
我们的系统?  
   
> 21:13:13  付云龙  
   
嗯  
   
> 21:13:19  吕彦鹏  
   
不方便透露.  
   
> 21:14:10  desperado  
   
看来，很牛呀  
   
> 21:15:08  付云龙  
   
嗯，目前高可用架构这块是怎么设计的呢  
   
> 21:35:22  程琳-杉德支付-PM  
   
感谢吕总的分享??????  
   
> 21:35:33  吕彦鹏  
   
[呲牙]  
   
> 21:37:59  desperado  
   
[强]  
   
> 21:46:18  付云龙  
   
感谢吕总分享  
   
> 21:56:02  丁志伟  
   
感谢分享，讲的够细。  
   
> 21:56:59  desperado  
   
感谢吕总  
   
