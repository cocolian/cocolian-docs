---
layout:     source 
title:      "2018-08-18-WeChat"
date:       2018-08-18 12:00:00
author:     Adun-爱云-研发-南京
lines:      188 
tag:       [chat]
---
> 09:49:32  永明-云账户-开发-北京  
   
d2315  
   
> 11:04:34  北京一张泽雄  
   
@张学鸿-北京-研发-民金所?状态机是就是由现状加输入决定执行什么流程，回归到下一状态。 典型的工作流模型  
   
> 11:05:10  北京一张泽雄  
   
比如OA  
   
> 11:06:29  张杨-航天电子-研发-北京  
   
Esb？  
   
> 11:07:40  北京一张泽雄  
   
本质是一样的  
   
> 11:08:11  北京一张泽雄  
   
esb是总线技  
   
> 11:09:17  北京一张泽雄  
   
术，重在适配  
   
> 11:09:38  北京一张泽雄  
   
与服务编排  
   
> 11:10:09  张杨-航天电子-研发-北京  
   
[强][强]  
   
> 11:10:15  北京一张泽雄  
   
状态机是个数学模型  
   
> 11:10:40  秋水-阿里云-鼓励师  
   
就是一个规则引擎吧  
   
> 11:11:34  北京一张泽雄  
   
差不多，就是配规则  
   
> 11:13:19  秋水-阿里云-鼓励师  
   
一堆影响因素，然后根据输入参数判断就好  
   
> 11:19:48  北京一张泽雄  
   
嗯  
   
> 11:21:58  北京一张泽雄  
   
OA系统就是典型的状态机  
   
> 11:22:58  北京一张泽雄  
   
有兴趣可以看看  有限状态机在OA系统中的应用  
   
> 11:24:13  地平线-文思-产品  
   
状态机之间通过什么流转啊？消息队列？  
   
> 11:24:30  曹祺-Airwallex上海-技术打杂  
   
消  
   
> 11:24:42  曹祺-Airwallex上海-技术打杂  
   
mq，数据库都有  
   
> 11:24:46  北京一张泽雄  
   
都行  
   
> 11:25:23  Jason finzsoft 打架 澳新  
   
这个其实很好理解 所有的流程图都能轻松做成状态机  
   
> 11:26:03  Jason finzsoft 打架 澳新  
   
为毛jbpm在国内不留行呢  
   
> 11:26:09  Jason finzsoft 打架 澳新  
   
多好用的东西  
   
> 11:26:11  北京一张泽雄  
   
是的，看看状态机原理就行了  
   
> 11:27:57  老汪-阿尔法-鼓励师-江苏  
   
规则引擎是另个东西。。面向流水  
   
> 11:29:22  Jason finzsoft 打架 澳新  
   
不就是rules engine么。。。应用及其广泛  
   
> 11:29:24  北京一张泽雄  
   
引擎就是个执行器  
   
> 11:31:34  北京一张泽雄  
   
讨论引擎没意义不大，你自己就能写  
   
> 11:32:24  老汪-阿尔法-鼓励师-江苏  
   
规则引擎，有输入输出，不过没有事件和状态的概念吧？  
   
> 11:34:58  北京一张泽雄  
   
中间输出其实就是状态  
   
> 11:35:23  老汪-阿尔法-鼓励师-江苏  
   
感觉不是一个东西  
   
> 11:39:23  北京一张泽雄  
   
断点续跑时就一样了  
   
> 11:41:34  老汪-阿尔法-鼓励师-江苏  
   
  
   
> 11:49:32  老汪-阿尔法-鼓励师-江苏  
   
检索了一下，规则引擎确实是有限状态机  
   
> 11:50:59  老汪-阿尔法-鼓励师-江苏  
   
[捂脸]  
   
> 12:44:59  张学鸿-北京-研发-民金所  
   
[抱拳]  
   
> 12:45:13  张学鸿-北京-研发-民金所  
   
受教 搬家累sb了  
   
> 16:36:33  通联支付-产品-符音-深圳  
   
[中国式投资骗局全览](http://mp.weixin.qq.com/s?__biz=MzIxNTc3ODI1Ng==&amp;amp;amp;mid=2247485269&amp;amp;amp;idx=1&amp;amp;amp;sn=ddb0b5922a6f0b6bde7fe7ded9f082cd&amp;amp;amp;chksm=979251eaa0e5d8fc5be65d3f8b6e8206360fe281fdc7b40c92926802f71d47736dcaf2f2ce8c&amp;amp;amp;mpshare=1&amp;amp;amp;scene=1&amp;amp;amp;srcid=0817NTp7iNuFHWL57avxtYCZ#rd)  
   
> 17:03:12  杨宽-比特大陆-区块链理疗师-bj  
   
好详细  
   
> 17:47:18  丁丁-群管理  
   
今天请到一位朋友，@Adun-爱云-研发-南京    给大家做分享，主题是 “分布式通信协议” 开始时间为【19:30】；欢迎欢迎[鼓掌][鼓掌][鼓掌]！（注： 1.嘉宾分享期间其他人不要发言打断嘉宾分享。2.分享完成后请大家积极补充和提问；3.烦请打“签到”，做签到，谢谢！)  
   
> 17:47:50  风兮-Java技术-上海  
   
签到  
   
> 17:48:30  mouse-xn-开发-深圳  
   
签到  
   
> 17:48:42  dreamup-平安-产品  
   
签到  
   
> 17:48:49  黄福祥-ETC车宝-鼓励师-广州  
   
签到  
   
> 17:48:50  追梦-区块链-北京-技术经理  
   
签到  
   
> 17:48:56  无缺-杭州-后端  
   
签到  
   
> 17:49:04  Alex ?? 深圳普尔瀚达@产品  
   
签到  
   
> 17:49:05  王岩(石头)-轻盈付-技术-北京  
   
！  
   
> 17:49:07  弋碎-国美-产品  
   
签到  
   
> 17:49:14  Yang-联拓-研发-北京  
   
签到  
   
> 17:51:55  申彬彬-随行付-PM-北京  
   
签到  
   
> 17:53:25  玖富-架构师  
   
签到  
   
> 17:53:49  Codefor-YMT-TechLead-BJ  
   
签到  
   
> 17:55:51  李杜-长沙万权集团-技术部经理  
   
签到  
   
> 17:57:04  彬-捷银-架构  
   
签到  
   
> 17:57:27  张海亮-中化-高级JAVA-北京  
   
签到  
   
> 18:01:05  李凯-潇湘支付-产品-长沙  
   
签到  
   
> 18:01:38  武亚斌-投哪网-产品-深圳  
   
签到  
   
> 18:03:17  明函-智仁科技-黑龙江-市场  
   
签到  
   
> 18:06:29  王宁-杉德-开发  
   
签到  
   
> 18:06:32  曹祺-Airwallex上海-技术打杂  
   
签到  
   
> 18:06:55  顾文烨—上海银行—产品—上海  
   
签到  
   
> 18:07:46  Cc老曹-英之泰-技术  
   
签到  
   
> 18:09:13  上海-上海中钢银联通-董路-技术  
   
签到  
   
> 18:09:18  老汪-阿尔法-鼓励师-江苏  
   
签到  
   
> 18:11:48  林庆荣-顺信服-技术-广州  
   
签到  
   
> 18:15:19  袁增辉-易联汇华-技术-北京  
   
签到  
   
> 18:15:24  李胜勇-永乐-G-北京  
   
签到  
   
> 18:21:36  涂智明-科蓝-开发-北京  
   
签到  
   
> 18:22:36  网商-技术-北京  
   
签到  
   
> 18:23:16  thq-51信用卡  
   
签到  
   
> 18:24:10  通联支付-产品-符音-深圳  
   
签到  
   
> 18:26:41  振效+神码+北京  
   
签到  
   
> 18:27:51  罗志威－深圳－以太零  
   
签到  
   
> 18:28:09  文刚_卓健_产品_杭州  
   
签到  
   
> 18:30:35  蔡郑豪-统统付-开发  
   
签到  
   
> 18:32:20  李小胖-优讯-打杂  
   
签到  
   
> 18:33:34  王成龙-新浪跨境支付-研发  
   
签到  
   
> 18:34:46  蒋招司-产品-杭州  
   
签到  
   
> 18:35:09  Garry-小米金融-产品  
   
签到  
   
> 18:37:07  鹏-东银-Java后端  
   
签到  
   
> 18:45:39  军波－开发－北京  
   
签到  
   
> 18:47:43  张震南-信雅达-互联网支付-杭州  
   
签到  
   
> 18:50:40  雷声大-付呗-cto  
   
签到  
   
> 18:52:23  smartwave-开科支付-成都  
   
签到  
   
> 19:00:16  杨海华-汇桔网-研发-广州  
   
签到  
   
> 19:03:30  csp-架构-深圳  
   
签到  
   
> 19:05:17  张岩-华恒科技-商务-吉林  
   
签到  
   
> 19:05:40  志明-平安普惠-PM-深圳  
   
签到  
   
> 19:07:16  张杨-航天电子-研发-北京  
   
签到  
   
> 19:08:47  蓝蝶-优络-技术-深圳  
   
签到  
   
> 19:09:50  泽西-趋恒-架构师  
   
签了  
   
> 19:10:30  丁爱民-58-开发  
   
签到  
   
> 19:10:59  Adun-爱云-研发-南京  
   
签到  
   
> 19:16:09  十年砍柴-元年-产品-上海  
   
签到  
   
> 19:19:40  苑（yuan）亚玮-Ping++  
   
签到  
   
> 19:21:03  优行-钰火-杭州  
   
签到  
   
> 19:31:26  Adun-爱云-研发-南京  
   
Hi all, 多谢大家。 我叫 Adun 佟，南京的一个研发。 最近一年左右在研究系统架构和分布式系统。不是这个领域的大牛。跟大家一起分享讨论。   
   
> 19:32:40  Adun-爱云-研发-南京  
   
今天给大家简单分享一下几种分布式系统的一致性算法。  
   
> 19:33:05  Adun-爱云-研发-南京  
   
常见的有 Paxos, Raft, ZAB.  
   
> 19:33:15  Adun-爱云-研发-南京  
   
群里有技术和其他领域背景的，所以不会讲的很深入，很靠近细节。尽量让大部分人理解。  
   
> 19:33:23  Adun-爱云-研发-南京  
   
首先简单说一下分布式系统。这是一个比较宽泛的概念。他的产生和出现是为了应对和解决以往系统的问题。  
   
> 19:35:09  Adun-爱云-研发-南京  
   
我的简单理解是一套互相连接共同向外提供服务的系统，系统内部节点间通过某种方式进行通信。 常见的大的如电商网站，小的如一个数据库集群，缓存集群等。  
   
> 19:38:17  Adun-爱云-研发-南京  
   
在分布式系统出现之前使用的单机系统，一旦服务器的操作系统、硬盘、网络等出现问题，就可能会出现服务中断，数据丢失等问题。 另外，单机的性能再高，存储能力再扩展，也是有限的，而分布式系统可以包含大量的服务器用来分散带宽、存储和计算压力。 第三，由于跨较远区域甚至跨国的网络延迟有时还是客观的，所以服务器集中在一个地方很难向较大范围提供较好的服务和体验。  
   
> 19:39:41  Adun-爱云-研发-南京  
   
百度上对分布式系统的解释是： 分布式系统（distributed system）是建立在网络之上的软件系统。正是因为软件的特性，所以分布式系统具有高度的内聚性和透明性。  
   
> 19:39:59  Adun-爱云-研发-南京  
   
我对这里的内聚性和透明性的理解是：。  
   
> 19:41:49  Adun-爱云-研发-南京  
   
内聚性：系统内的节点、服务目的、分工、规则明确。 透明性：分布式系统对外提供服务，调用该系统的外部用户不用考虑塔式怎么工作的，只要根据规则进行使用就成，也不需要知道里面包含多少台计算机，都在什么地方。  
   
> 19:47:58  Adun-爱云-研发-南京  
   
分布式系统有很多优点，同时由于不完美的运行环境，他本身需要解决一些问题。 如：系统中使用的每个节点都可能出现单点故障突然不工作了，节点间会有或大或小、忽大忽小的网络延迟，节点间的网络也有可能出问题。 从技术角度看，可能发生的问题基本上认为早晚会发生。说到底很多问题就是概率和成本收益的平衡。 因此，一个分布式系统要正常提供对外的服务，它的设计本身就要考虑到这些问题的解决。 在算法层面就是由分布式系统的一致性算法来辅助解决和应对这些问题，确保系统尽可能的对外正常的提供服务。  
   
> 19:55:44  Adun-爱云-研发-南京  
   
这里说尽可能的意思是分布式系统不能确保永远完全没有问题，尤其是一些极端情况，比如一个3个节点的数据库集群，单节点挂掉的概率较小，3个节点同时挂掉的概率极小极小，不过也存在这种可能，不过概率很小，一般不考虑。或者机房停电，光缆被挖段，如果几个节点都在一个机房，那就不能工作了。今天讲的一致性算法主要解决的是从系统的角度分析一个分布式系统内部节点本身和节点间出现问题的解决。跟这些外部问题关联较小，那些场景要同时借助其他手段来缓解和解决。  
   
> 19:56:34  Adun-爱云-研发-南京  
   
先说几个比较容易理解的常见的实际问题。  
   
> 19:58:22  Adun-爱云-研发-南京  
   
一个系统包含5个节点，由于网络原因其中3个节点和另2个节点失去了联系，这时候系统应该怎么处理，是否还可以继续提供服务。  
   
> 19:59:31  Adun-爱云-研发-南京  
   
如果继续提供服务，他们之间的数据就是不一致的，后面节点间的网络恢复后，怎么解决数据不一致的问题。  
   
> 20:00:33  Adun-爱云-研发-南京  
   
节点间的网络延迟、磁盘读写、CPU处理能力不同，保存到这个系统中的数据在哪些情况下可以认为保存成功了，还要以一种效率较高的方式来实现。  
   
> 20:01:32  Adun-爱云-研发-南京  
   
下面我以 ZAB 协议为例，进行讲解。  
   
> 20:02:32  Adun-爱云-研发-南京  
   
比我原计划的要慢，抱歉，估计还要半小时左右。  
   
> 20:03:18  梁子龙-维恩贝特-开发  
   
[咖啡]  
   
> 20:08:39  Adun-爱云-研发-南京  
   
ZAB 的基本特点如下： 1. 把节点分两种，Leader (主)和 Follower(从)。 2. 有一个主节点，所有写操作全部通过节点进行处理，如果一个从节点收到了一个写操作请求，就会转给主节点处理。 3. 其他节点都是从节点，可以通过从节点进行读操作。 4. 主节点通过选举得出，主节点失踪后，其他从节点自动开始选举新的主节点。  
   
> 20:09:43  Adun-爱云-研发-南京  
   
这里写操作可以认为是保存或修改现有数据。 读操作可以认为是读一个现存的数据出来。  
   
> 20:14:03  Adun-爱云-研发-南京  
   
读操作相对简单一些，这里主要讲写操作。 常规写流程如下： 1. 客户向主节点请求写数据 X 2. 主节点为该数据生成一个唯一的递增Id，叫 ZXID X(Id) 3. 主节点把 X(Id) 发给所有的从节点，跟他们确认能不能正常把数据记录下来，这个操作叫 Propose 提议 4. 超过一半的节点向主节点回复没问题，这个回复操作叫 ACK 应答 5. 主节点收到一半以上从节点的肯定答复后，给所有的从节点发送确认提交请求，表示你们可以把这个数据保存下来了，同时自己也正式保存这个数据，这个过程叫 Commit 提交   
   
> 20:16:29  Adun-爱云-研发-南京  
   
现在问题来了，如果没有超过一半的从节点给主节点回复 ACK。那么主节点就不能确认该消息可以成功记录下来。 为啥一定要收到超过一半的从节点的答复？  
   
> 20:17:28  Adun-爱云-研发-南京  
   
答案是为了确保数据的一致性。  
   
> 20:17:51  梁子龙-维恩贝特-开发  
   
而且主节点本身也是选举出来的  
   
> 20:18:13  梁子龙-维恩贝特-开发  
   
如果主节点挂了呢  
   
> 20:18:14  Adun-爱云-研发-南京  
   
是的一会讲选举和故障恢复。  
   
> 20:18:24  梁子龙-维恩贝特-开发  
   
：）  
   
> 20:19:51  Adun-爱云-研发-南京  
   
一般分布式一致性算法可以确保在部分节点挂掉的情况下保持数据的一致性，在大部分节点都同时挂掉的情况不能确保。  
   
> 20:20:29  Adun-爱云-研发-南京  
   
比如一共5个节点，2个挂掉没问题，其中可以包括主节点，如果3个挂掉了，就不能确保了。  
   
> 20:20:53  Adun-爱云-研发-南京  
   
一般出现这种情况时，比如5个节点只剩了2个，这两个节点就不再提供服务了。  
   
> 20:23:42  Adun-爱云-研发-南京  
   
举个复杂一点点的例子。 比如一个银行的存款系统： 3个节点在上海，2个节点在广州。一个账号 Adun，有1K的钱在里面。5个节点都包含这个数据。这是上海广州之间的网络挂了。我连到上海的节点把钱转给一个人，然后连到广州的节点把里面的1K钱转给另一个人。他们之间是断开的，如果同时提供转账服务，就出现了数据一致性的问题。而如果只有3个节点的上海提供服务就没有这个问题了。   
   
> 20:24:13  Adun-爱云-研发-南京  
   
另一个问题是，他们之间的网络恢复后，以谁的数据为准呢？  
   
> 20:24:45  Adun-爱云-研发-南京  
   
所以大部分的分布式一致性算法都是采用大多数认同的方式。  
   
> 20:26:28  Adun-爱云-研发-南京  
   
当然，在写数据的时候如果强制确认所有节点都写入了新数据会更安全和一直，但是系统的可用性和性能就大大降低了，只要有一个节点挂了，系统就不工作了。  
   
> 20:27:56  Adun-爱云-研发-南京  
   
下面讲节点挂掉的情况。 少于一半的子节点挂掉没有任何影响。  
   
> 20:28:36  Adun-爱云-研发-南京  
   
达到一半的子节点挂掉系统不能提供服务，一般这种情况概率很小。  
   
> 20:29:39  Adun-爱云-研发-南京  
   
一个子节点挂掉一段时间后又恢复了之后： 1. 先通过主节点同步新的数据，因为自己挂了一段时间，很可能没有最新的数据 2. 数据同步之后正式成为工作的子节点开始工作  
   
> 20:30:02  Adun-爱云-研发-南京  
   
包括添加一个新的子节点到一个现有的集群，也是这个过程。  
   
> 20:30:48  Adun-爱云-研发-南京  
   
主节点挂掉后，集群暂时不提供写服务，开始新的主节点选举。  
   
> 20:35:20  Adun-爱云-研发-南京  
   
选举规则如下： 发消息到每一个自己还能连上的节点：包含自己的节点编号叫 myid 和 自己保存的数据的最大的 ZXID。 1. 谁的 ZXID 最大，谁就是新的主节点。为啥？因为这表示他的数据最新。尽量确保数据一致性。 2. ZXID相同的时候，谁的 myid 最大谁是新的主节点 3. 收到其他节点的数据后，跟自己的判断，如果对方比自己的大，就认同对方为主节点 4. 得到一半以上(注意这里又是一半以上) 节点认同的候选的节点成为新的主节点  
   
> 20:36:39  Adun-爱云-研发-南京  
   
新的主节点选举出来之后，进入集群的数据同步节点，先检查集群内部哪些节点的数据比自己旧，把数据同步过去。 然后开始向外部提供服务。  
   
> 20:38:56  Adun-爱云-研发-南京  
   
在新的主节点选出来之前，集群不能提供写服务。这里的步骤有好几步，在正常的服务器环境下，这个过程是很快的，几十到几百毫秒。  
   
> 20:40:37  Adun-爱云-研发-南京  
   
刚才的上海和广州的场景，广州的发现上海的节点失踪了，这时候开始选举新的主节点，但是它们只有2个节点，选不出来主节点，也不提供服务。上海的继续服务。网络恢复后，把数据同步到广州节点然后继续工作。  
   
> 20:43:23  Adun-爱云-研发-南京  
   
这是 ZAB 协议的主要信息。 还有很多细节，感兴趣的话可以去看看。不过一般分布式系统的一致性算法都有点复杂。 ZAB 是为了支撑 ZooKeeper 服务设计出来的，ZooKeeper 是给其他服务提供集群管理服务的，所以他本身要足够健壮。 ZAB 协议的全称就是 Zookeeper Atomic Broadcast，即 ZooKeeper 原子性广播协议。  
   
> 20:49:09  Adun-爱云-研发-南京  
   
下面再简单介绍几句 Raft 算法。 Raft 算法很多地方跟 ZAB 很像，也分 主节点和从节点，主节点选举的地方有一点差别。 1. 发现主节点失踪一段时间后，所有从节点向其他从节点发消息，让他们选自己为新的主节点 2. 还没参加选举的节点如果收到其他节点的选举请求，就选举自己收到的第一个节点，后面谁再请求自己支持选举，就告诉他们我已经支持另一个节点了 3. 如果一个节点发现另一个节点得到的支持比自己多，也就开始无条件支持那个节点选举，同时让支持自己的节点也去支持它 4. 如果一轮没选出来得到大多数节点支持的主节点，就开始下一轮选举，直到一个节点得到了大部分节点支持，成为新的主节点  
   
> 20:51:33  Adun-爱云-研发-南京  
   
还有一个叫 Paxos 的一致性算法，更复杂，惭愧我目前还不敢确保完全理解，Paxos 算法还衍生出来好几种变体，经典的 Paxos 算法不分主节点和从节点。 其实现在大部分的一致性算法都是起源于或参考了 Paxos 算法，有人说只有 Paxos 才是真正的一致性算法。  
   
> 20:52:11  Adun-爱云-研发-南京  
   
这就是今天的分享内容，谢谢大家。  
   
> 20:52:40  Adun-爱云-研发-南京  
   
估计群里有这方面的大牛，我抛砖科普一下。  
   
> 20:58:17  Adun-爱云-研发-南京  
   
有相关的问题也欢迎讨论。  
   
> 20:58:46  江冬勤-幕饰网-技术总监-合肥  
   
[握手]  
   
> 21:01:45  北京-中投科信产品-张冠杰  
   
谢谢～  
   
> 21:03:16  梁子龙-维恩贝特-开发  
   
感谢分享：）  
   
> 21:06:42  Adun-爱云-研发-南京  
   
[呲牙][抱拳]  
   
> 21:10:15  wood-通联-技术  
   
这个也是区块链共识算法的基础  
   
> 21:10:31  wood-通联-技术  
   
很多东西都是相通的  
   
> 21:10:32  Adun-爱云-研发-南京  
   
是的  
   
> 21:10:44  Adun-爱云-研发-南京  
   
区块链也是一种分布式系统  
   
> 21:11:32  Adun-爱云-研发-南京  
   
BTW, 下面是一个 raft 算法的动态交互演示，可以帮助更好的理解 http://thesecretlivesofdata.com/raft/  
   
> 21:11:54  wood-通联-技术  
   
[十分钟讲清楚共识机制](http://mp.weixin.qq.com/s?__biz=MjM5ODIzNDQ3Mw==&amp;amp;amp;mid=2649968275&amp;amp;amp;idx=1&amp;amp;amp;sn=54fb9bbe353941c629a17bd68841f401&amp;amp;amp;chksm=beca3e9589bdb7838277ea201087bc761103d0a3fe084c37c498f1b6effea267bcf64503e60a&amp;amp;amp;mpshare=1&amp;amp;amp;scene=1&amp;amp;amp;srcid=0425zbIZxjHWxRH14x3RaLeu#rd)  
   
> 21:12:18  wood-通联-技术  
   
这是以前我自己写着玩的东西  
   
> 21:12:25  Adun-爱云-研发-南京  
   
对一致性要求也较高，51% 算力攻击跟今天的主节点选举需要大部分节点支持类似。  
   
> 21:12:50  wood-通联-技术  
   
是  
   
> 21:12:52  Adun-爱云-研发-南京  
   
[强] 我学习一下  
   
> 21:30:31  永明-云账户-开发-北京  
   
在主节点失去心跳到选举新的主节点作为写入，这期间的数据怎么保证最终一致？  
   
> 21:38:02  Adun-爱云-研发-南京  
   
主节点和从节点之间吗？  
   
> 21:38:27  永明-云账户-开发-北京  
   
对  
   
> 21:39:19  永明-云账户-开发-北京  
   
选举规则如下： 发消息到每一个自己还能连上的节点：包含自己的节点编号叫 myid 和 自己保存的数据的最大的 ZXID。 1. 谁的 ZXID 最大，谁就是新的主节点。为啥？因为这表示他的数据最新。尽量确保数据一致性。 2. ZXID相同的时候，谁的 myid 最大谁是新的主节点 3. 收到其他节点的数据后，跟自己的判断，如果对方比自己的大，就认同对方为主节点 4. 得到一半以上(注意这里又是一半以上) 节点认同的候选的节点成为新的主节点  
   
> 21:39:28  永明-云账户-开发-北京  
   
是这段话吗？  
   
> 21:39:48  Adun-爱云-研发-南京  
   
这是新的主节点选举规则  
   
> 21:39:55  Adun-爱云-研发-南京  
   
ZAB 协议里面  
   
> 21:41:09  永明-云账户-开发-北京  
   
在主节点失去心跳到选举新的主节点作为写入，这期间的数据怎么保证最终一致？那还是这个问题  
   
> 21:42:26  Adun-爱云-研发-南京  
   
主节点失联的时候不能写数据。如果此时主节点上有没有提交的数据它就挂了，那么客户端就不能得到这个消息成功写入的响应。  
   
> 21:42:38  Adun-爱云-研发-南京  
   
因此系统本身的数据是一致的。  
   
> 21:43:20  Adun-爱云-研发-南京  
   
主节点上没提交的数据在从节点上也是未提交，因此没提交数据的ZXID不算数。  
   
> 21:43:45  Adun-爱云-研发-南京  
   
严格的讲这段时间系统是不可写的。  
   
> 21:46:00  永明-云账户-开发-北京  
   
嗯。一般主从节点重新选举的频率是多少  
   
> 21:47:29  Adun-爱云-研发-南京  
   
这个要看具体情况了  
   
> 21:47:50  Adun-爱云-研发-南京  
   
跟服务器，网络，机房环境，系统本身开发的怎么样，压力这些都有关系  
   
> 21:48:02  Adun-爱云-研发-南京  
   
节点挂掉才会进行选举  
   
> 21:48:23  Adun-爱云-研发-南京  
   
不过具有主节点的系统，主节点的压力也会比较大  
   
> 21:48:41  Adun-爱云-研发-南京  
   
协议的具体实现互相差别也很大  
   
> 21:50:08  Adun-爱云-研发-南京  
   
涉及到开发细节的话还有很多参数要考虑，比如心跳间隔，节点数量等  
   
> 21:50:10  永明-云账户-开发-北京  
   
好！谢谢了  
   
> 21:50:41  Adun-爱云-研发-南京  
   
客气了  
   
> 21:51:40  永明-云账户-开发-北京  
   
是，也就是说根据参数等因素，来决定要不要在主节点还没有down时，重新进行选举！我理解的对吗？  
   
> 21:52:19  永明-云账户-开发-北京  
   
参数就是收集来的指数  
   
> 21:52:20  Adun-爱云-研发-南京  
   
不是，选举一定是在主节点挂了之后做  
   
> 21:53:05  Adun-爱云-研发-南京  
   
判断依据的问题，比如通过心跳来判断，心跳间隔太大响应就慢，心跳间隔太小容易出现假死  
   
> 21:53:07  永明-云账户-开发-北京  
   
嗯。即使压力过大，也不换  
   
> 21:54:02  Adun-爱云-研发-南京  
   
这种小概率问题，一般需要外部系统通过缓存，延迟调用等方式解决  
   
> 21:54:47  Adun-爱云-研发-南京  
   
运维上需要对服务器做自动化监控预警告警方面的处理。  
   
> 21:56:58  永明-云账户-开发-北京  
   
OK  
   
