---
layout:     source 
title:      "2017-12-12-WeChat"
date:       2017-12-12 12:00:00
author:     "PaymentGroup"
tag:		  [chat]
header-img: "img/post-bg-wechat.jpg"
---
> 09:12:45  Ryan Cao  
   
![2017-12-12 09:12:45](http://static.cocolian.cn/img/201712/20171212_091245.png) 
   
> 09:13:40  Ryan Cao  
   
之后估计所有的数据库都会自动做index优化和数据结构优化了。  
   
> 09:15:44  Codefor-YMT-TechLead-BJ  
   
??，AI真的在各个领域渗透啊  
   
> 09:26:19  韩财光-东软(前)-开发-广州  
   
这里所谓的智能更多的只是做了个 合理或者复原 的动作  
   
> 09:31:07  Codefor-YMT-TechLead-BJ  
   
你要说他效果好，ML能根据历史经验学习进行调参，还好理解。3x的速度收益也不是多惊人。  但是10-100x less space这个就很厉害了，用GPU算，莫非是用CPU换空间？暴力算？  
   
> 09:34:09  韩财光-东软(前)-开发-广州  
   
一百倍应该是gpu对比cpu的优势结果  
   
> 09:35:06  Codefor-YMT-TechLead-BJ  
   
那应该就是CPU换空间咯  
   
> 09:38:42  韩财光-东软(前)-开发-广州  
   
这类才是真正的创新创造  
   
> 09:52:02  王伟  
   
ml在各个行业渗透，保守估计2040左右，会引起社会经济巨大变革  
   
> 11:17:32  田浩沛  
   
![2017-12-12 11:17:32](http://static.cocolian.cn/img/201712/20171212_111732.png) 
   
> 11:17:51  田浩沛  
   
故纸堆翻出来的，谁有？  
   
> 11:19:26  王亮  
   
这算古董了啊  
   
> 11:19:52  田浩沛  
   
哈哈哈  
   
> 11:21:10  北京一张泽雄  
   
这本书我有  
   
> 11:21:17  北京一张泽雄  
   
Head first  
   
> 11:22:22  田浩沛  
   
书不错  
   
> 11:22:23  田浩沛  
   
呵呵，。  
   
> 11:28:57  毛毛  
   
我有电子版  
   
> 11:29:40  田浩沛  
   
能不能换纸质的呀  
   
> 11:29:43  田浩沛  
   
好作者要支持的  
   
> 11:29:45  田浩沛  
   
哈哈  
   
> 11:29:48  田浩沛  
   
![2017-12-12 11:29:48](http://static.cocolian.cn/img/201712/20171212_112948.png) 
   
> 11:30:13  田浩沛  
   
@北京一张泽雄  这本怎么样  
   
> 11:30:23  田浩沛  
   
我在故纸堆里也找到了  
   
> 11:30:24  毛毛  
   
后来买了一本  
   
> 11:30:28  毛毛  
   
送人了  
   
> 11:31:26  玩物不丧志  
   
当年大学用的教科书就是这本head first  
   
> 11:31:29  玩物不丧志  
   
通熟易懂  
   
> 11:31:54  邹刘名  
   
这些难道就是码农收藏品[吓]  
   
> 11:31:57  毛毛  
   
head first 一系列  
   
> 11:32:05  毛毛  
   
大多都不错  
   
> 11:32:45  北京一张泽雄  
   
@田浩沛银生宝产品  java模式这本书写的挺不错  
   
> 11:34:13  田浩沛  
   
嗯，那我看看  
   
> 11:35:52  北京一张泽雄  
   
OCP ， 接口隔离原则 递米特法则，里氏替换原则，这些是最基本的  
   
> 11:35:57  右军  
   
java模式 是通俗易懂的。  
   
> 11:38:01  曹伟  
   
看了好几本模式相关的书，最后还是觉得最原始的（4人帮写的）那本表述的最清楚，最有价值  
   
> 11:38:24  北京一张泽雄  
   
GOF  
   
> 11:39:49  北京一张泽雄  
   
介绍模式的书其实都差不多，关键在于自己去悟，就如同36计一样  
   
> 11:40:01  Json  
   
说起书来了  
   
> 11:40:20  Json  
   
Effective Java 3 预售了  
   
> 11:40:44  Json  
   
这可能是最NB的一本Java专著了吧  
   
> 11:41:31  北京一张泽雄  
   
如果仅语言而言，建议看看JVM的东西  
   
> 11:43:59  玩物不丧志  
   
还是不太一样的，模式的有些书不适合新手  
   
> 11:44:19  玩物不丧志  
   
晦涩难懂  
   
> 11:44:41  胡桥-资邦金服-账务核心业务架构  
   
把它写出来，不难的  
   
> 11:46:06  Json  
   
擦 过期了  
   
> 11:46:57  胡桥-资邦金服-账务核心业务架构  
   
总是去看书是没用的，要动手，写的代码再傻逼，也是对模式的一种理解，然后有事没事把代码拿出来改一改  
   
> 11:47:00  夏志强~快付通~技术经理  
   
京东上没看到第三版  
   
> 11:47:26  奶瓶  
   
搜到了消息说可能12月出版  
   
> 11:48:23  胡桥-资邦金服-账务核心业务架构  
   
![2017-12-12 11:48:23](http://static.cocolian.cn/img/201712/20171212_114823.png) 
   
> 11:48:26  胡桥-资邦金服-账务核心业务架构  
   
好贵呀  
   
> 11:49:16  北京一张泽雄  
   
模式这个东西，就是在特定我场景下的一种建议性的方案，理解了问题了，理解了解决思想就行了  
   
> 11:55:02  夏志强~快付通~技术经理  
   
我怀疑我的是假京东  
   
> 11:56:09  北京一张泽雄  
   
上 z.cn  
   
> 11:56:18  夏志强~快付通~技术经理  
   
哦  
   
> 12:00:08  胡桥-资邦金服-账务核心业务架构  
   
我理解模式就是面向对象，怎么把代码结构设计的更漂亮，出了问题能快速定位问题，新进项目开发人员能更快上手  
   
> 12:01:18  疯狂钻石  
   
这种东西都是给写框架的人看的  
   
> 12:01:35  疯狂钻石  
   
设计模式 你平时写业务代码用不到啥的  
   
> 12:01:42  胡桥-资邦金服-账务核心业务架构  
   
![2017-12-12 12:01:42](http://static.cocolian.cn/img/201712/20171212_120142.png) 
   
> 12:02:16  胡桥-资邦金服-账务核心业务架构  
   
我把我理解的啥是设计模式，用小代码写出来  
   
> 12:02:31  疯狂钻石  
   
平时的业务代码你都在一直说啥设计模式 要么炫技 要么过度设计  
   
> 12:02:34  地平线-文思-产品  
   
@胡桥-资邦-账务?[强]  
   
> 12:02:35  胡桥-资邦金服-账务核心业务架构  
   
看书是没用的，书只能参考，还的自己动手写  
   
> 12:03:53  疯狂钻石  
   
当时写中间件的时候用的比较多 应为真的要做到开闭原则   
   
> 12:06:00  卜浩-首展-开发  
   
重构的时候才发现设计模式的重要性[捂脸]  
   
> 12:09:15  疯狂钻石  
   
重构也是业务驱动为主  
   
> 12:39:09  曹伟  
   
模式相关的书，要能说在点上，强烈推荐GOF原著  
   
> 16:08:05  戴开显  
   
额，请教下，有前辈玩过cassandra吗？  
   
> 16:09:53  戴开显  
   
请教下 cassandra相关的问题，有前辈玩过吗？  我现在要迁移数据,把旧datacenter的数据迁移到新datacenter中。迁移完成后，如何去比对 这两个datacenter的数据的一致性了？  
   
> 16:14:36  疯狂钻石  
   
请问下 有个玩java字节码的la打头的那个工具包叫啥来着 有大神知道吗？我想学习下 谢谢  
   
> 16:20:15  Json  
   
没听说过哎。。。Javassist 比较常见  
   
> 16:22:42  疯狂钻石  
   
好吧 谢谢  
   
> 17:01:27  bill在飞  
   
cglib  
   
> 17:01:55  疯狂钻石  
   
不是这个  
   
> 17:03:15  窦巍  
   
What’s New: AWS and Ningxia Western Cloud Data Technology Co. Ltd (NWCD) Announce a Second AWS Region in China, Now Available to Customers  
   
> 17:04:08  窦巍  
   
小伙伴们可以有更多选择了  
   
> 17:05:21  疯狂钻石  
   
我知道是啥了  
   
> 17:07:17  夏志强~快付通~技术经理  
   
asm？  
   
> 17:08:13  秋水-厚本金融-产品经理  
   
sm  
   
> 17:08:54  覃（qin）  
   
千呼万唤，AWS宁夏区域终于开放了  
   
> 17:09:34  覃（qin）  
   
就这个  
   
> 18:41:28  bill在飞  
   
讨论一下，你们数据库设计的时候，会考虑控制一个表的字段数不要太多吗？  
   
> 18:42:07  曹伟  
   
当然。  
   
> 18:42:34  bill在飞  
   
我现在看到一个业务表160个字段  
   
> 18:42:41  bill在飞  
   
吓哭了  
   
> 18:42:49  邓晓杰～友鱼科技～java开发  
   
必须的 最大利用数据库行buffer  
   
> 18:42:50  曹伟  
   
列、行都要控制数量  
   
> 18:43:33  北京一张泽雄  
   
晕，人都没法读了  
   
> 18:44:08  曹伟  
   
做报表吧  
   
> 18:44:09  覃（qin）  
   
都有控制  
   
> 18:44:32  bill在飞  
   
这么多字段，感觉要是全字段select会影响，大一点点的结果集网络传输会慢死  
   
> 18:44:52  曹伟  
   
160个字段，还不如使用宽表  
   
> 18:45:44  曹伟  
   
非关系型数据库  
   
> 18:46:02  bill在飞  
   
〈必须的 最大利用数据库行buffer 〉  这个理论要学习一下  
   
> 18:46:36  程超  
   
160有点多，哈哈，是否可以拆表  
   
> 18:47:03  bill在飞  
   
![2017-12-12 18:47:03](http://static.cocolian.cn/img/201712/20171212_184703.png) 
   
> 18:47:11  bill在飞  
   
160 records  
   
> 18:49:32  bill在飞  
   
感觉越来越多人把关系数据库当nosql来用  字段随随便便来个冗余  
   
> 18:50:34  曹伟  
   
建议不要过多依赖关系型数据库的特性做太多事情，尤其是核心系统。  
   
> 18:51:16  Ryan Cao  
   
查询效率主要看索引 和字段数的关系不大，你不要select * 就好了。 拆表的话，我觉得除非是不需要经常做join的，或者你可以读写分离把扩展表缓存掉的，不然select 多几个字段比join的效率要高得多。  
   
> 18:53:31  bill在飞  
   
高得多是高多少  
   
> 18:53:54  bill在飞  
   
join的关键字有索引的话我觉得差不了多少  
   
> 18:54:08  bill在飞  
   
冗余的危害也很大啊  
   
> 18:54:26  bill在飞  
   
得考虑清楚才好  
   
> 18:55:16  夏志强~快付通~技术经理  
   
见过200多字段的表[捂脸]  
   
> 18:55:34  夏志强~快付通~技术经理  
   
每次查询，数据块竞争比较大  
   
> 18:55:57  夏志强~快付通~技术经理  
   
多字段表还是有蛮大影响  
   
> 18:56:02  程超  
   
虽然查询效率看索引，但是字段太多，说明数据库设计，或者领域设计的有问题，不便于扩展，只能通过不断的加字段，实现功能的增加  
   
> 18:56:38  bill在飞  
   
比较认同你这个说法  
   
> 18:57:19  夏志强~快付通~技术经理  
   
单查询就不行，因为有的同一行数据会分在不同的数据块，如果有热快竞争，那查询效率，低的吓人  
   
> 18:57:25  bill在飞  
   
这样在逻辑代码层面基本是面向字段编程了  
   
> 18:57:48  bill在飞  
   
逻辑要啥字段到表里捞  
   
> 18:59:50  bill在飞  
   
@夏志强~快付通~技术经理 是硬盘的block吗？  
   
> 19:52:47  夏志强~快付通~技术经理  
   
我是指oracle数据块  
   
> 20:12:23  Ryan Cao  
   
但是行数据都是尽可能储存在一个数据块里的。我记得一个行片段应该是可以存最多255个列。160个还没有达到这个限制。大多数时候，一个行片段就在一个数据块里。 拆表的话，除非能够保证这两个表只有很少的情况会被同时读取，不然你一次要读多个数据块进缓存，不是更慢？  如果有大量并发读的场景的话，本身就应该是使用更多的缓存，读写分离后，多个读库做负载均衡等方式来优化。  
   
> 21:21:11  夏志强~快付通~技术经理  
   
他这个应该是没做缓存，不能就不会这么设计表  
   
> 21:22:15  夏志强~快付通~技术经理  
   
这么多列是有很大可能会跨块存储的，我原来优化过这种，通过oracle的awr报告，这种冲突很常见  
   
